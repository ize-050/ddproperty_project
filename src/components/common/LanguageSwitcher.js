"use client";

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { locales, languageNames, defaultLocale } from '../../navigation';
import { usePathname } from 'next/navigation';

export default function LanguageSwitcher() {
  const pathname = usePathname();
  const router = useRouter();
  
  // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤
  const flagCodes = {
    th: 'üáπüá≠', // ‡∏ò‡∏á‡πÑ‡∏ó‡∏¢ (TH)
    en: 'üá¨üáß', // ‡∏ò‡∏á‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (GB)
    zh: 'üá®üá≥', // ‡∏ò‡∏á‡∏à‡∏µ‡∏ô (CN)
    ru: 'üá∑üá∫'  // ‡∏ò‡∏á‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ (RU)
  };

  // ‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
  const localeShortCodes = {
    th: 'TH',
    en: 'EN',
    zh: 'ZH',
    ru: 'RU'
  };
  
  // ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤
  const currencies = {
    th: 'THB',
    en: 'USD',
    zh: 'CNY',
    ru: 'RUB'
  };
  
  const [currentLocale, setCurrentLocale] = useState(defaultLocale);
  const [isMounted, setIsMounted] = useState(false);
  const [currentCurrency, setCurrentCurrency] = useState(currencies[defaultLocale]);
  const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = useState(false);
  const [isCurrencyDropdownOpen, setIsCurrencyDropdownOpen] = useState(false);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
  const languageDropdownRef = useRef(null);
  const currencyDropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (languageDropdownRef.current && !languageDropdownRef.current.contains(event.target) &&
          !event.target.closest('.lang-btn')) {
        setIsLanguageDropdownOpen(false);
      }
      
      if (currencyDropdownRef.current && !currencyDropdownRef.current.contains(event.target) &&
          !event.target.closest('.currency-btn')) {
        setIsCurrencyDropdownOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞ localStorage
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á hydration error
  useEffect(() => {
    setIsMounted(true);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å URL ‡∏Å‡πà‡∏≠‡∏ô
    const path = pathname || '';
    const localeMatch = path.match(/^\/([a-z]{2})(?:\/|$)/);

    let detectedLocale = defaultLocale;
    if (localeMatch && locales.includes(localeMatch[1])) {
      detectedLocale = localeMatch[1];
    }
    
    setCurrentLocale(detectedLocale);
    setCurrentCurrency(currencies[detectedLocale]);
  }, [pathname]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
  const handleLanguageChange = (locale) => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì URL ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    let newPath = '';
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏ó‡∏¢) ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    if (locale === defaultLocale && (pathname === '/' || pathname === `/${currentLocale}`)) {
      newPath = '/';
    } 
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏ó‡∏¢) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    else if (locale === defaultLocale) {
      // ‡∏•‡∏ö prefix ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å URL
      newPath = pathname.replace(/^\/[a-z]{2}(\/|$)/, '/');
    } 
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô
    else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ prefix ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
      if (pathname.match(/^\/[a-z]{2}(\/|$)/)) {
        newPath = pathname.replace(/^\/[a-z]{2}(\/|$)/, `/${locale}$1`);
      } 
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ prefix ‡∏†‡∏≤‡∏©‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      else {
        newPath = `/${locale}${pathname}`;
      }
    }

    // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡πÉ‡∏´‡∏°‡πà
    try {
      router.push(newPath);
    } catch (error) {
      console.error('Error changing language:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      window.location.href = newPath;
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ mount ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á hydration error
  if (!isMounted) {
    return <div className="language-switcher-placeholder" style={{ width: '60px', height: '32px' }}></div>;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
  const handleCurrencyChange = (currency) => {
    setCurrentCurrency(currency);
    // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î dropdown ‡∏†‡∏≤‡∏©‡∏≤
  const toggleLanguageDropdown = () => {
    console.log('Toggle language dropdown', isLanguageDropdownOpen);
    setIsLanguageDropdownOpen(!isLanguageDropdownOpen);
    setIsCurrencyDropdownOpen(false); // ‡∏õ‡∏¥‡∏î dropdown ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î dropdown ‡∏†‡∏≤‡∏©‡∏≤
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î dropdown ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
  const toggleCurrencyDropdown = () => {
    console.log('Toggle currency dropdown', isCurrencyDropdownOpen);
    setIsCurrencyDropdownOpen(!isCurrencyDropdownOpen);
    setIsLanguageDropdownOpen(false); // ‡∏õ‡∏¥‡∏î dropdown ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î dropdown ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
  };


  // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ‡πÅ‡∏ö‡∏ö inline
  const dropdownStyles = {
    wrapper: {
      position: 'relative',
      marginRight: '10px'
    },
    button: {
      display: 'flex',
      alignItems: 'center',
      background: 'transparent',
      border: 'none',
      cursor: 'pointer',
      padding: '5px 8px',
      borderRadius: '4px',
      transition: 'all 0.3s ease'
    },
    flagIcon: {
      fontSize: '16px',
      marginRight: '5px'
    },
    text: {
      fontSize: '13px',
      fontWeight: '500',
      color: '#333',
      margin: '0 3px'
    },
    dropdownIcon: {
      fontSize: '8px',
      color: '#999',
      marginLeft: '3px'
    },
    dropdownMenu: {
      position: 'absolute',
      top: '100%',
      right: '0',
      background: 'white',
      borderRadius: '4px',
      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',
      minWidth: '120px',
      zIndex: '1050',
      marginTop: '5px',
      overflow: 'hidden',
      padding: '5px 0'
    },
    dropdownItem: {
      display: 'flex',
      alignItems: 'center',
      padding: '8px 12px',
      fontSize: '13px',
      color: '#333',
      background: 'transparent',
      border: 'none',
      width: '100%',
      textAlign: 'left',
      cursor: 'pointer'
    }
  };

  return (
    <div style={{ display: 'flex', alignItems: 'center' }}>
      {/* Language Switcher - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ */}
      <div style={dropdownStyles.wrapper}>
        <button 
          style={dropdownStyles.button}
          onClick={toggleLanguageDropdown}
        >
          <span style={dropdownStyles.flagIcon}>{flagCodes[currentLocale]}</span>
          <span style={dropdownStyles.text}>{localeShortCodes[currentLocale]}</span>
          <span style={dropdownStyles.dropdownIcon}>‚ñº</span>
        </button>
        {isLanguageDropdownOpen && (
          <div ref={languageDropdownRef} style={dropdownStyles.dropdownMenu}>
            {locales.map((locale) => (
              <button 
                key={locale}
                style={{
                  ...dropdownStyles.dropdownItem,
                  backgroundColor: locale === currentLocale ? '#f5f5f5' : 'transparent'
                }}
                onClick={() => {
                  handleLanguageChange(locale);
                  setIsLanguageDropdownOpen(false);
                }}
              >
                <span style={{ marginRight: '8px' }}>{flagCodes[locale]}</span> {languageNames[locale]}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Currency Dropdown - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ */}
      <div style={dropdownStyles.wrapper}>
        <button 
          style={dropdownStyles.button}
          onClick={toggleCurrencyDropdown}
        >
          <span style={dropdownStyles.text}>{currentCurrency}</span>
          <span style={dropdownStyles.dropdownIcon}>‚ñº</span>
        </button>
        {isCurrencyDropdownOpen && (
          <div ref={currencyDropdownRef} style={dropdownStyles.dropdownMenu}>
            {Object.values(currencies).map((currency) => (
              <button 
                key={currency}
                style={{
                  ...dropdownStyles.dropdownItem,
                  backgroundColor: currency === currentCurrency ? '#f5f5f5' : 'transparent'
                }}
                onClick={() => {
                  handleCurrencyChange(currency);
                  setIsCurrencyDropdownOpen(false);
                }}
              >
                {currency}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// ‡∏•‡∏ö export default ‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å
