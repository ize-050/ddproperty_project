"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { locales, languageNames, defaultLocale } from '../../navigation';
import { usePathname } from 'next/navigation';

export default function LanguageSwitcher() {
  const pathname = usePathname();
  const router = useRouter();
  const [currentLocale, setCurrentLocale] = useState(defaultLocale);
  const [isMounted, setIsMounted] = useState(false);

  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞ localStorage
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á hydration error
  useEffect(() => {
    setIsMounted(true);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏≤‡∏Å URL ‡∏Å‡πà‡∏≠‡∏ô
    const path = pathname || '';
    const localeMatch = path.match(/^\/([a-z]{2})(?:\/|$)/);

    if (localeMatch && locales.includes(localeMatch[1])) {
      setCurrentLocale(localeMatch[1]);
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏ô URL ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    setCurrentLocale(defaultLocale);
  }, [pathname]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
  const handleLanguageChange = (locale) => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì URL ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    let newPath = '';
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏ó‡∏¢) ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    if (locale === defaultLocale && (pathname === '/' || pathname === `/${currentLocale}`)) {
      newPath = '/';
    } 
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏ó‡∏¢) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    else if (locale === defaultLocale) {
      // ‡∏•‡∏ö prefix ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å URL
      newPath = pathname.replace(/^\/[a-z]{2}(\/|$)/, '/');
    } 
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô
    else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ prefix ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
      if (pathname.match(/^\/[a-z]{2}(\/|$)/)) {
        newPath = pathname.replace(/^\/[a-z]{2}(\/|$)/, `/${locale}$1`);
      } 
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ prefix ‡∏†‡∏≤‡∏©‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      else {
        newPath = `/${locale}${pathname}`;
      }
    }

    // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡πÉ‡∏´‡∏°‡πà
    try {
      router.push(newPath);
    } catch (error) {
      console.error('Error changing language:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      window.location.href = newPath;
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ mount ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á hydration error
  if (!isMounted) {
    return <div className="language-switcher-placeholder" style={{ width: '60px', height: '32px' }}></div>;
  }

  // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤
  const flagCodes = {
    th: 'üáπüá≠', // ‡∏ò‡∏á‡πÑ‡∏ó‡∏¢ (TH)
    en: 'üá¨üáß', // ‡∏ò‡∏á‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (GB)
    zh: 'üá®üá≥', // ‡∏ò‡∏á‡∏à‡∏µ‡∏ô (CN)
    ru: 'üá∑üá∫'  // ‡∏ò‡∏á‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ (RU)
  };

  // ‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
  const localeShortCodes = {
    th: 'TH',
    en: 'EN',
    zh: 'ZH',
    ru: 'RU'
  };

  return (
    <div className="language-switcher">
      <div className="dropdown">
        <button
          className="btn btn-sm language-dropdown-btn dropdown-toggle"
          type="button"
          data-bs-toggle="dropdown"
          aria-expanded="false"
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '4px',
            backgroundColor: '#007bff',
            borderRadius: '4px',
            padding: '4px 8px',
            color: '#fff'
          }}
        >
          <span style={{ fontSize: '16px' }}>{flagCodes[currentLocale]}</span>
          <span style={{ fontWeight: '500' }}>{localeShortCodes[currentLocale]}</span>
        </button>
        <ul className="dropdown-menu dropdown-menu-end">
          {locales.map((locale) => (
            <li key={locale}>
              <a
                className={`dropdown-item ${locale === currentLocale ? 'active' : ''}`}
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  if (locale !== currentLocale) {
                    handleLanguageChange(locale);
                  }
                }}
                style={{ display: 'flex', alignItems: 'center', gap: '8px' }}
              >
                <span style={{ fontSize: '16px' }}>{flagCodes[locale]}</span>
                <span>{languageNames[locale]}</span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

// ‡∏•‡∏ö export default ‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å
